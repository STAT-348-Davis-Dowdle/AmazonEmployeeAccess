
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(vroom)
> library(patchwork)
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ recipes      1.0.8
✔ dials        1.2.0     ✔ rsample      1.2.0
✔ dplyr        1.1.3     ✔ tibble       3.2.1
✔ ggplot2      3.4.3     ✔ tidyr        1.3.0
✔ infer        1.0.5     ✔ tune         1.1.2
✔ modeldata    1.2.0     ✔ workflows    1.1.3
✔ parsnip      1.1.1     ✔ workflowsets 1.0.1
✔ purrr        1.0.2     ✔ yardstick    1.2.0
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard()  masks scales::discard()
✖ dplyr::filter()   masks stats::filter()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec()
✖ recipes::step()   masks stats::step()
• Use suppressPackageStartupMessages() to eliminate package startup messages
> library(embed)
> 
> # set working directory
> # setwd("C:/Users/davis/OneDrive - Brigham Young University/Documents/skool/new/stat 348/AmazonEmployeeAccess/AmazonEmployeeAccess")
> 
> # read in training data
> train <- vroom("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # 2 plots for EDA - column characterizations and bar plot of response (ACTION)
> # (DataExplorer::plot_intro(train)) / (DataExplorer::plot_bar(train))
> 
> # make recipe, prep for baking, then bake
> recipe <- recipe(ACTION ~ ., data = train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_other(all_nominal_predictors(), threshold = .01) %>% # all uncommon categories for all variables converted to other
+   step_dummy(all_nominal_predictors()) %>% 
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
> 
> train$ACTION <- as.factor(train$ACTION)
> 
> prep <- prep(recipe)
> 
> baked <- bake(prep, new_data = NULL)
> 
> 
> ## logistic regression
> 
> log_model <- logistic_reg() %>%
+   set_engine("glm")
> 
> log_workflow <- workflow() %>%
+   add_recipe(recipe) %>%
+   add_model(log_model) %>%
+   fit(data = train)
> 
> log_prediction <- predict(log_workflow,
+                           new_data = test,
+                           type = "prob")
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = if (type ==  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> 
> log_submission <- data.frame(id = test$id, 
+                              ACTION = log_prediction$.pred_1)
> 
> write.csv(log_submission, "log_submission.csv", row.names = F)
> 
> 
> # penalized logistic regression
> 
> pen_log_model <- logistic_reg(mixture = tune(),
+                               penalty = tune()) %>%
+   set_engine("glmnet")
> 
> pen_log_workflow <- workflow() %>%
+   add_recipe(recipe) %>%
+   add_model(pen_log_model)
> 
> pen_log_tuning_grid <- grid_regular(penalty(),
+                                     mixture(),
+                                     levels = 5)
> 
> pen_log_folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> pen_cv_results <- pen_log_workflow %>%
+   tune_grid(resamples = pen_log_folds,
+             grid = pen_log_tuning_grid,
+             metrics = metric_set(roc_auc))
> 
> pen_log_besttune <- pen_cv_results %>%
+   select_best("roc_auc")
> 
> final_pen_log_workflow <- pen_log_workflow %>%
+   finalize_workflow(pen_log_besttune) %>%
+   fit(data = train)
> 
> pen_log_predictions <- final_pen_log_workflow %>%
+   predict(new_data = test, type = "prob")
> 
> pen_log_submission <- data.frame(id = test$id, ACTION = pen_log_predictions$.pred_1)
> 
> write.csv(pen_log_submission, "pen_log_submission.csv", row.names = F)
> 
> proc.time()
   user  system elapsed 
172.529   2.842 154.444 
